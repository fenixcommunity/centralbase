#TODO public credentials, no problem to show it

# WARNING - don't ever encrypt passwords when storing them at a database
#16 BYTES
encryption:
  algorithm: AES
  key: 2f#k*28FG9%d&829

#jwt manual security token
jwt:
  clocksec: 400
  expirationsec: 86400
  issuer: fenixcommunity
  secret: d)kfd&2kfff

#aws credentials from spring cloud vault
#aws:
#  app:
#    keyid :  xxx
#    secretkey :  xxx

#restcaller
restcaller:
  credentials:
    password: password1212@oqBB
    username: ADMIN_TEST

#jdbc security queries
authorizationQuery:
  getUserQuery:
    select login as username, p.password as password, a.blocked = false as enabled
    from account a
    inner join password p on p.account_id = a.id
    where a.login = upper(?)
  getAuthoritiesQuery:
    select login as username, r.name as authority
    from role r
    inner join role_to_role_group rrg on rrg.role_id = r.id
    inner join account_to_role_group arg on arg.role_group_id = rrg.role_group_id
    inner join account a on a.id = arg.account_id
    where a.login = upper(?)
  getGroupAuthoritiesByUsernameQuery:
    select rg.id, rg.name, r.name
    from role_group rg
    inner join role_to_role_group rrg on rg.id = rrg.role_group_id
    inner join role r on rrg.role_id = r.id
    inner join account_to_role_group arg on arg.role_group_id = rrg.role_group_id
    inner join account a on a.id = arg.account_id
    where a.login = upper(?)
  getUserExistsQuery:
    select login as username from account where login = upper(?)
