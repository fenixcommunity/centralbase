#GLOBAL
spring:
  datasource:
    data: classpath:/script/postgres/postgres_initialization.sql
    #HIKARI
    hikari:
      connectionTimeout: 30000
      idleTimeout: 30000
      maxLifetime: 2000000
      maximumPoolSize: 20
      minimumIdle: 5
      poolName: SpringBootJPAHikariCP
    #on load script
    initialization-mode: always
  h2:
    console:
      enabled: true
      path: /h2-console
  ## Hibernate/JPA Properties
  # The SQL dialect makes Hibernate generate better SQL for the chosen database
  jpa:
    database: default
    # Hibernate ddl auto (create, create-drop, validate, update)
    generate-ddl: true
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: com.fenixcommunity.centralspace.domain.configuration.DomainNamingStrategy
    properties:
      hibernate:
        bytecode:
          use_reflection_optimizer: false
        default_schema: public
        format_sql: true
        id:
          new_generator_mappings: false
        jdbc:
          lob:
            non_contextual_creation: true
        search:
          autoregister_listeners: false
        show_sql: true
        use_sql: true

#POSTGRES
postgres:
  datasource:
    driverClassName: org.postgresql.Driver
    jdbc-url: jdbc:postgresql://localhost:5432/centralspacedb
    password: admin
    platform: postgres
    username: postgres

#H2/HIKARI
h2:
  datasource:
    driverClassName: org.h2.Driver
    jdbc-url: jdbc:h2:mem:centralspacedb_h2
    password: admin
    platform: h2
    username: h2
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect

#REDIS
redis:
  hostName: localhost
  port: 6379
  jedisAvailable: true
  lettuceAvailable: false

# n + 1 detector
hibernation:
    query:
      interceptor:
        error-level: ERROR

#jdbc security queries
authorizationQuery:
  getUserQuery:
          select login as username, p.password as password, a.blocked = false as enabled
          from account a
          inner join password p on p.account_id = a.id
          where a.login = ?
  getAuthoritiesQuery:
    select lower(a.login) as username, r.name as authority 
    from role r 
    inner join role_to_role_group rrg on rrg.role_id = r.id 
    inner join account_to_role_group arg on arg.role_group_id = rrg.role_group_id 
    inner join account a on a.id = arg.account_id 
    where a.login = ?
  getGroupAuthoritiesByUsernameQuery:
    select rg.id, rg.name, r.name 
    from role_group rg
    inner join role_to_role_group rrg on rg.id = rrg.role_group_id
    inner join role r on rrg.role_id = r.id
    inner join account_to_role_group arg on arg.role_group_id = rrg.role_group_id
    inner join account a on a.id = arg.account_id
    where a.login = ?
  getUserExistsQuery:
    select login as username from account where login = ?
